<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean name="userService" class="com.kelson.keeku.service.UserService" />
	
	<bean id="propertyConfigurer"
      class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"  p:location="classpath:jdbc.properties" />
      
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
	   <property name="driverClass" value="com.mysql.jdbc.Driver" />
	   <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1/keeku" />
	   <property name="username" value="keeku"/>
	   <property name="password" value="keeku"/>
	   <property name="idleConnectionTestPeriod" value="60"/>
	   <property name="idleMaxAge" value="240"/>
	   <property name="maxConnectionsPerPartition" value="30"/>
	   <property name="minConnectionsPerPartition" value="10"/>
	   <property name="partitionCount" value="3"/>
	   <property name="acquireIncrement" value="5"/>
	   <property name="statementsCacheSize" value="100"/>
	   <property name="releaseHelperThreads" value="3"/>
	</bean>

	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mainDataSource" />
		<property name="configLocation" value="classpath:com/ccc/scsk/persistence/MapperConfig.xml" />
		<property name="mapperLocations" value="classpath*:com/ccc/scsk/persistence/scsk/*.xml" />
	</bean> 
	
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"></property>  
    </bean>  

   <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        <property name="transactionManager" ref="transactionManager"></property>  
        <property name="transactionAttributes">  
            <props>  
                <!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行;   
                PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常;   
                PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; P  
                ROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 如果当前有事务, 则挂起;   
                PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常;   
                +/-Exception</prop> + 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->  
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>  
                <prop key="del*"> PROPAGATION_SUPPORTS</prop>  
                <prop key="update*">PROPAGATION_REQUIRED</prop>  
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>  
            </props>  
        </property>  
    </bean>  
    
     <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
        <property name="beanNames">  
            <!-- 对类名以MybatisService结尾的类进行代理 -->  
            <value>*MybatisService</value>  
        </property>  
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->  
        <property name="interceptorNames">  
            <list>  
                <value>transactionInterceptor</value>  
            </list>  
        </property>  
    </bean>  
    
    
</beans>
